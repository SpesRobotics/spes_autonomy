#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.7047912883088662, 0.6089703052995792, 0.7701424084423895)
                double3 target = (-7.758265361527779, -13.686176916158287, -11.86829890406616)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./object_picking.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:sampledLighting:autoEnable" = 0
            int "rtx:directLighting:sampledLighting:samplesPerPixel" = 1
            bool "rtx:ecoMode:enabled" = 1
            int "rtx:ecoMode:maxFramesWithoutChange" = 20
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            token "rtx:lightspeed:ReLAX:fireflySuppressionType" = "None"
            bool "rtx:lightspeed:ReLAX:historyClampingEnabled" = 0
            bool "rtx:matteObject:enabled" = 0
            bool "rtx:newDenoiser:enabled" = 0
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            int "rtx:post:dlss:execMode" = 0
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            bool "rtx:reflections:enabled" = 0
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            bool "rtx:translucency:enabled" = 0
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World" (
    references = @./lite6.usda@
)
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, -0.085, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    over "lite6"
    {
        over "base_link"
        {
        }

        over "link_base"
        {
            over "joint1"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link1"
        {
            over "joint2"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link2"
        {
            over "joint3"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link3"
        {
            over "joint4"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link4"
        {
            over "joint5"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link5"
        {
            over "joint6"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link6"
        {
        }

        over "gripper_base_link"
        {
            over "gripper_left_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            over "gripper_right_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            def Camera "Camera"
            {
                float2 clippingRange = (0.01, 10000000)
                float focalLength = 18.147562
                float focusDistance = 400
                float horizontalAperture = 40.955
                quatd xformOp:orient = (6.123233995736766e-17, -0.7071067811865476, -0.7071067811865475, -4.329780281177466e-17)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.055, 1.3353245366985987e-7, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "visuals" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }

            over "collisions" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }
        }

        over "left_finger" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/finger_color> (
                bindMaterialAs = "strongerThanDescendants"
            )

            over "collisions" (
                prepend apiSchemas = ["PhysxConvexDecompositionCollisionAPI", "PhysxConvexHullCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexDecomposition"
            }
        }

        over "right_finger" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/finger_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
        }
    }

    def Scope "Looks"
    {
        def Material "finger_color"
        {
            token outputs:mdl:displacement.connect = </World/Looks/finger_color/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/finger_color/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/finger_color/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                color3f inputs:coat_color = (0.000001, 9.957806e-7, 9.957806e-7) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = "Clearcoat is tinted and affects the underlying material"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint = (0.000001, 9.9999e-7, 9.9999e-7) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color = (0.000001, 9.9999e-7, 9.9999e-7) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "screwdriver_orange"
        {
            token outputs:mdl:displacement.connect = </World/Looks/screwdriver_orange/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/screwdriver_orange/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/screwdriver_orange/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                color3f inputs:coat_color = (0.9156118, 0.2688471, 0.046360075) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = "Clearcoat is tinted and affects the underlying material"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint = (0.9535865, 0.19313143, 0) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color = (0.87341774, 0.28717405, 0.088447385) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "screwdriver_gray"
        {
            token outputs:mdl:displacement.connect = </World/Looks/screwdriver_gray/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/screwdriver_gray/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/screwdriver_gray/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                color3f inputs:diffuse_tint = (0.6118144, 0.61180824, 0.61180824) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                    renderType = "color"
                )
                float inputs:metalness = 0.65 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metalness"
                    doc = "Bias towards pure specular reflection"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    over "ros2_graph"
    {
        def OmniGraphNode "isaac_create_render_product" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom rel inputs:cameraPrim = </World/lite6/gripper_base_link/Camera> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/on_playback_tick.outputs:tick>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (251.59296, 569.08435)
        }

        def OmniGraphNode "ros2_camera_helper" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/isaac_create_render_product.outputs:execOut>
            custom string inputs:frameId
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </World/ros2_graph/isaac_create_render_product.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName
            custom token inputs:type (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
            int node:typeVersion = 2
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (552.00476, 509.42435)
        }
    }

    def Xform "screwdriver" (
        delete apiSchemas = ["PhysxMeshMergeCollisionAPI", "PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.28, 0.017641973606846967, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/screwdriver_orange> (
                bindMaterialAs = "strongerThanDescendants"
            )
            rel material:binding:physics = </World/screwdriver/PhysicsMaterial> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.025, 0.04, 0.023)
            double3 xformOp:translate = (0, 0, 0.02)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Cube_01" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/screwdriver_orange> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.017, 0.04, 0.015)
            double3 xformOp:translate = (0, 0.04, 0.018)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/screwdriver/Cube>
                rel physics:body1 = </World/screwdriver/Cube_01>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-1.7763568e-15, 0.6666667, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cylinder "Cylinder" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            double height = 1
            rel material:binding = </World/Looks/screwdriver_gray> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double radius = 0.5
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.002, 0.1, 0.002)
            double3 xformOp:translate = (0, 0.1, 0.018)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/screwdriver/Cube_01>
                rel physics:body1 = </World/screwdriver/Cylinder>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-3.5527137e-15, 1.6, -0.083333336)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def OmniGraph "ros2_position_respawn"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-187.38805, 128.13768)
        }

        def OmniGraphNode "ros2_publish_transform_tree" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom rel inputs:parentPrim = </World/lite6/gripper_base_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/screwdriver> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (229.89133, 242.46661)
        }

        def OmniGraphNode "ros2_subscribe_twist" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom string inputs:topicName = "respawn"
            token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeTwist"
            int node:typeVersion = 1
            custom vector3d outputs:angularVelocity
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearVelocity
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (400.09076, -103.75943)
        }

        def OmniGraphNode "script_node" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/ros2_subscribe_twist.outputs:execOut>
            custom string inputs:script = '''import numpy as np
import random
from pxr import Gf

def setup(db: og.Database):
    pass


def cleanup(db: og.Database):
    pass


def compute(db: og.Database):
    stage = omni.usd.get_context().get_stage()
    screwdriver = stage.GetPrimAtPath("/World/screwdriver/Cube/screwdriver")
    
    x_coor = random.uniform(0.25, 0.35)
    y_coor = random.uniform(-0.1, 0.1)
    new_position = Gf.Vec3d(x_coor, y_coor, 0.0)
    
    screwdriver.GetAttribute("xformOp:translate").Set(new_position)'''
            custom token inputs:scriptPath
            custom bool inputs:usePath
            token node:type = "omni.graph.scriptnode.ScriptNode"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom bool state:omni_initialized
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (804.27783, -75.276)
        }

        def OmniGraphNode "ros2_publish_raw_transform_tree" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom string inputs:childFrameId = "pick_target"
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom string inputs:parentFrameId = "screwdriver"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom quatd inputs:rotation = (0, 0.707, 0.707, 0)
            custom bool inputs:staticPublisher = 0
            custom double inputs:timeStamp
            custom string inputs:topicName
            custom vector3d inputs:translation = (0.005, 0.005, 0.12)
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishRawTransformTree"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (253.10826, 541.9804)
        }

        def OmniGraphNode "ros2_publish_transform_tree_for_gripper" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_position_respawn/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom rel inputs:parentPrim = </World/lite6/base_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom bool inputs:staticPublisher
            custom rel inputs:targetPrims = </World/lite6/gripper_base_link> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishTransformTree"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (570.34955, 169.2905)
        }
    }

    def PhysicsScene "PhysicsScene" (
        prepend apiSchemas = ["PhysxSceneAPI"]
    )
    {
        uniform token physxScene:broadphaseType = "SAP"
        bool physxScene:enableGPUDynamics = 0
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

