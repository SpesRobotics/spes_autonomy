#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.5209634186657864, 0.060735724864846394, 0.3562513635877708)
                double3 target = (-6.915904087120942, -2.3521208757843177, -5.947788399976706)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./imitation.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:sampledLighting:autoEnable" = 0
            int "rtx:directLighting:sampledLighting:samplesPerPixel" = 1
            bool "rtx:ecoMode:enabled" = 1
            int "rtx:ecoMode:maxFramesWithoutChange" = 20
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            token "rtx:lightspeed:ReLAX:fireflySuppressionType" = "None"
            bool "rtx:lightspeed:ReLAX:historyClampingEnabled" = 0
            bool "rtx:matteObject:enabled" = 0
            bool "rtx:newDenoiser:enabled" = 0
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            int "rtx:post:dlss:execMode" = 0
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            bool "rtx:reflections:enabled" = 0
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            bool "rtx:translucency:enabled" = 0
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World" (
    references = @./lite6.usda@
)
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, -0.085, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    over "lite6"
    {
        over "base_link"
        {
        }

        over "link_base"
        {
            over "joint1"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link1"
        {
            over "joint2"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link2"
        {
            over "joint3"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link3"
        {
            over "joint4"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link4"
        {
            over "joint5"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link5"
        {
            over "joint6"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "link6"
        {
        }

        over "gripper_base_link"
        {
            over "gripper_left_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            over "gripper_right_joint"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            def Camera "Camera"
            {
                float2 clippingRange = (0.01, 10000000)
                float focalLength = 18.147562
                float focusDistance = 400
                float horizontalAperture = 40.955
                quatd xformOp:orient = (6.123233995736766e-17, -0.7071067811865476, -0.7071067811865475, -4.329780281177466e-17)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.12, 1.3353245366985987e-7, -0.09)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "visuals" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }

            over "collisions" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI"]
            )
            {
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
            }
        }

        over "left_finger" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/finger_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
        }

        over "right_finger" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </World/Looks/finger_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
        }
    }

    def Scope "Looks"
    {
        def Material "finger_color"
        {
            token outputs:mdl:displacement.connect = </World/Looks/finger_color/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/finger_color/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/finger_color/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                color3f inputs:coat_color = (0.000001, 9.957806e-7, 9.957806e-7) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = "Clearcoat is tinted and affects the underlying material"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint = (0.000001, 9.9999e-7, 9.9999e-7) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color = (0.000001, 9.9999e-7, 9.9999e-7) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "spes_s_color"
        {
            token outputs:mdl:displacement.connect = </World/Looks/spes_s_color/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/spes_s_color/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/spes_s_color/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBRBase.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBRBase"
                color3f inputs:coat_color = (0.045825977, 0.10695266, 0.835443) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Clearcoat"
                    displayName = "Clearcoat Tint"
                    doc = "Clearcoat is tinted and affects the underlying material"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_tint = (0.032473456, 0.104404815, 0.96202534) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color = (0.010397203, 0.13313557, 0.6160338) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    over "ros2_graph"
    {
        def OmniGraphNode "isaac_create_render_product" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom rel inputs:cameraPrim = </World/lite6/gripper_base_link/Camera> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/on_playback_tick.outputs:tick>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (251.59296, 569.08435)
        }

        def OmniGraphNode "ros2_camera_helper" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </World/ros2_graph/isaac_create_render_product.outputs:execOut>
            custom string inputs:frameId
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </World/ros2_graph/isaac_create_render_product.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName
            custom token inputs:type (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
            int node:typeVersion = 2
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (552.00476, 509.42435)
        }
    }

    def Xform "spes_s"
    {
        token visibility = "invisible"
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.195, 0.07, -0.008)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube_01" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/spes_s_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (6.123233995736766e-17, 0, 0, 1)
            double3 xformOp:scale = (0.01, 0.05, 0.01)
            double3 xformOp:translate = (0.0015, -1.3877787807814457e-17, 0.019323775674055944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Cube_03" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/spes_s_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.01, 0.05, 0.01)
            double3 xformOp:translate = (0.05780575340479621, -1.3877787807814457e-17, 0.019323775674055944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/spes_s/Cube_01>
                rel physics:body1 = </World/spes_s/Cube_03>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-5.630575, -2.220446e-16, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (-1.5920408e-16, 0, 0, 1)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cube "Cube_04" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/spes_s_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (0.7071067811865476, 0, 0, 0.7071067811865475)
            double3 xformOp:scale = (0.01, 0.0465, 0.01)
            double3 xformOp:translate = (0.02939922229514713, 0.019921892310830677, 0.019323775674055944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/spes_s/Cube_03>
                rel physics:body1 = </World/spes_s/Cube_04>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-2.8406532, 0.39843786, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cube "Cube_05" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/spes_s_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (0.7071067811865476, 0, 0, 0.7071067811865475)
            double3 xformOp:scale = (0.01, 0.0465, 0.01)
            double3 xformOp:translate = (-0.0265, -0.02, 0.019323775674055944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/spes_s/Cube_04>
                rel physics:body1 = </World/spes_s/Cube_05>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-3.9921892, 1.2021338, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cube "Cube_06" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding = </World/Looks/spes_s_color> (
                bindMaterialAs = "strongerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.01, 0.05, 0.01)
            double3 xformOp:translate = (-0.055, -1.3877787807814457e-17, 0.019323775674055944)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/spes_s/Cube_05>
                rel physics:body1 = </World/spes_s/Cube_06>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (2, 0.61290324, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.70710677, 0, 0, -0.70710677)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "pattern_s"
    {
        token visibility = "invisible"
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.215, 0, 0.005)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube_01" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.25, 0.2, 0.008)
            double3 xformOp:translate = (-0.01, -0.129, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Cube_02" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.25, 0.2, 0.008)
            double3 xformOp:translate = (-0.01, 0.128, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/pattern_s/Cube_01>
                rel physics:body1 = </World/pattern_s/Cube_02>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-2.220446e-16, 1.3, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cube "Cube_03" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.038, 0.04, 0.008)
            double3 xformOp:translate = (-0.0475, 0.009, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/pattern_s/Cube_02>
                rel physics:body1 = </World/pattern_s/Cube_03>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.152, -0.5875, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cube "Cube_04" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.068, 0.06, 0.008)
            double3 xformOp:translate = (0.0813, -0.001, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/pattern_s/Cube_03>
                rel physics:body1 = </World/pattern_s/Cube_04>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (3.4026315, -0.29347825, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cube "Cube_05" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.045, 0.06, 0.008)
            double3 xformOp:translate = (-0.112, -0.001, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/pattern_s/Cube_04>
                rel physics:body1 = </World/pattern_s/Cube_05>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-2.842647, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Cube "Cube_00" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.038, 0.04, 0.008)
            double3 xformOp:translate = (0.009, -0.009, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/pattern_s/Cube_05>
                rel physics:body1 = </World/pattern_s/Cube_00>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (2.6888888, -0.18666667, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "screwdriver"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.12, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Cube"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.01, 0.03, 0.01)
            double3 xformOp:translate = (0, 0, 0.0055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Cube_01"
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.006, 0.02, 0.006)
            double3 xformOp:translate = (0, 0.02, 0.0055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cylinder "Cylinder"
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            double height = 1
            double radius = 0.5
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.002, 0.08, 0.002)
            double3 xformOp:translate = (0, 0.067, 0.005)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

