#! /usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped, Pose
import ros2_numpy as rnp
import time
import pyspacemouse
import numpy as np
import transforms3d as t3d


def are_transforms_close(a, b=None, linear_tol=0.03, angular_tol=0.03):
    if b is None:
        b = np.eye(4)
    c = np.linalg.inv(a) @ b
    xyz = c[:3, 3]
    if np.any(np.abs(xyz) > linear_tol):
        return False
    rpy = t3d.euler.mat2euler(c[:3, :3])
    if np.any(np.abs(np.array(rpy)) > angular_tol):
        return False
    return True


class SpaceTeleop(Node):
    def __init__(self):
        super().__init__("space_teleop")

        self.__linear_scale = 0.0005
        self.__angular_scale = 0.0005

        self.__last_target_time = 0
        self.__trajectory = None

        pyspacemouse.open()
        self.__publisher = self.create_publisher(PoseStamped, "/target_frame_raw", 1)
        self.__current_pose_subscriber = self.create_subscription(
            PoseStamped, "/current_pose", self.current_callback, 1
        )
        self.__timer = self.create_timer(1.0 / 200, self.timer_callback)

    def current_callback(self, msg):
        if time.time() - self.__last_target_time > 0.3:
            self.__trajectory = None

        if self.__trajectory is not None:
            return
        self.__trajectory = rnp.numpify(msg.pose)

    def timer_callback(self):
        state = pyspacemouse.read()
        xyz = np.array(
            [
                state.y * self.__linear_scale,
                -state.x * self.__linear_scale,
                state.z * self.__linear_scale,
            ]
        )
        rotation = t3d.euler.euler2mat(
            state.roll * self.__angular_scale,
            state.pitch * self.__angular_scale,
            -state.yaw * self.__angular_scale,
        )
        step_tf = t3d.affines.compose(xyz, rotation, [1, 1, 1])

        if are_transforms_close(step_tf, linear_tol=0.00001, angular_tol=0.00001):
            return

        self.__last_target_time = time.time()

        if self.__trajectory is None:
            return

        self.__trajectory[:3, :3] = step_tf[:3, :3] @ self.__trajectory[:3, :3]
        self.__trajectory[:3, 3] += step_tf[:3, 3]

        msg = PoseStamped()
        msg.pose = rnp.msgify(Pose, self.__trajectory)

        self.__publisher.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = SpaceTeleop()
    rclpy.spin(node)
    rclpy.shutdown()


if __name__ == "__main__":
    main()
