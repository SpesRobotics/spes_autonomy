#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.8399976592873687, 0.8399976592873696, 0.8399977585792623)
                double3 target = (-3.97803837648425e-8, -3.978038265461947e-8, 7.956076830684111e-8)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 2
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./spesbot.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def "spesbot_raw" (
        prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
        prepend references = @file:/home/milos/row-following/Simulation/spesbot/spesbot_raw.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0.08881770144756898)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "base_link" (
            delete apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
        )
        {
            over "left_motor"
            {
                float drive:angular:physics:stiffness = 0
                float drive:angular:physics:targetVelocity = 0
            }

            over "right_motor"
            {
                float drive:angular:physics:stiffness = 0
            }

            over "caster_steering_joint" (
                delete apiSchemas = ["PhysicsDriveAPI:angular", "PhysicsJointStateAPI:angular"]
            )
            {
            }
        }

        over "caster_holder_link"
        {
            over "caster_wheel_joint" (
                delete apiSchemas = ["PhysicsJointStateAPI:angular", "PhysicsDriveAPI:angular"]
            )
            {
            }
        }
    }

    def OmniGraph "ActionGraph"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 7)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "ros2_publish_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn
            delete uint inputs:execIn.connect = </World/ActionGraph/on_tick.outputs:tick>
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom uint64 inputs:queueSize
            custom rel inputs:targetPrim = </World/spesbot_raw> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom double inputs:timeStamp
            prepend double inputs:timeStamp.connect = </World/ActionGraph/isaac_read_simulation_time.outputs:simulationTime>
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2PublishJointState"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (384.526, 479.3207)
        }

        def OmniGraphNode "ros2_subscribe_joint_state" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context
            custom uint inputs:execIn
            delete uint inputs:execIn.connect = </World/ActionGraph/on_tick.outputs:tick>
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace
            custom uint64 inputs:queueSize
            custom string inputs:topicName
            token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeJointState"
            int node:typeVersion = 2
            custom double[] outputs:effortCommand
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token[] outputs:jointNames
            custom double[] outputs:positionCommand
            custom double outputs:timeStamp
            custom double[] outputs:velocityCommand
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (391.6335, 178.17159)
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand
            prepend double[] inputs:effortCommand.connect = </World/ActionGraph/ros2_subscribe_joint_state.outputs:effortCommand>
            custom uint inputs:execIn
            delete uint inputs:execIn.connect = </World/ActionGraph/on_tick.outputs:tick>
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom int[] inputs:jointIndices
            custom token[] inputs:jointNames
            prepend token[] inputs:jointNames.connect = </World/ActionGraph/ros2_subscribe_joint_state.outputs:jointNames>
            custom double[] inputs:positionCommand
            prepend double[] inputs:positionCommand.connect = </World/ActionGraph/ros2_subscribe_joint_state.outputs:positionCommand>
            custom string inputs:robotPath
            custom rel inputs:targetPrim = </World/spesbot_raw> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:usePath = 0
            custom double[] inputs:velocityCommand
            prepend double[] inputs:velocityCommand.connect = </World/ActionGraph/ros2_subscribe_joint_state.outputs:velocityCommand>
            token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (860.1669, 175.0915)
        }

        def OmniGraphNode "isaac_read_simulation_time" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom bool inputs:resetOnStop
            custom int64 inputs:swhFrameNumber
            token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
            int node:typeVersion = 1
            custom double outputs:simulationTime
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (115, 575)
        }

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 1
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-40.369404, 268.11865)
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }
}

