#! /usr/bin/env python3
import rclpy
from rclpy.node import Node
import socket
import struct
from datetime import datetime, timedelta
from geometry_msgs.msg import Twist

UDP_IP = "127.0.0.1"
UDP_PORT = 5005

class VisualController(Node):
    def __init__(self):
        super().__init__('visual_controller')
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # UDP
        self.sock.bind((UDP_IP, UDP_PORT))
        self.timer = self.create_timer(0.1, self.udp_callback)

        self.publisher = self.create_publisher(Twist, 'cmd_vel', 10)
        
    
    def move_robot(self, center_x, center_y):
        print("********************", center_x, center_y)
        linear_vel = 0.2
        angular_vel = 0.5
        img_center_x = 640/2
        img_center_y = 480 /2

        twist_msg = Twist()
        if img_center_x != int(center_x) or img_center_y != int(center_y):
            print("=================", int(center_x), int(center_y), type(int(center_x)))
            twist_msg.linear.x = linear_vel
            twist_msg.angular.z = 0.0
            self.publisher.publish(twist_msg)


    def udp_callback(self):
        data, addr = self.sock.recvfrom(1024)  # buffer size is 1024 bytes
        unpacked_data = struct.unpack('>HIHHHHBqq', data)

        class_ = unpacked_data[0]
        instance = unpacked_data[1]
        center_x = unpacked_data[2]
        center_y = unpacked_data[3]
        height = unpacked_data[4]
        width = unpacked_data[5]
        precision = unpacked_data[6]
        timestamp_sec = unpacked_data[7]
        timestamp_nsec = unpacked_data[8]

        dt = datetime.fromtimestamp(timestamp_sec)
        dt_with_ns = dt + timedelta(microseconds=timestamp_nsec // 1000)
        formatted_time = dt_with_ns.strftime("%H:%M:%S.%f")[:-3]

        self.get_logger().info(f"class = {class_}, instance = {instance}, center_x = {center_x}, center_y = {center_y}, height = {height}, width = {width}, precision = {precision/100}, timestamp_sec = {formatted_time}")
    

        
        self.move_robot(center_x, center_y)
        

    

        

def main(args=None):
    rclpy.init(args=args)
    visual_controller = VisualController()
    rclpy.spin(visual_controller)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
