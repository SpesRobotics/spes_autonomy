#! /usr/bin/env python3

import rclpy
from rclpy.node import Node
from spes_msgs.msg import MoveCommand
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import time


class Move(Node):
    def __init__(self):
        super().__init__('move')
        self.cv_bridge = CvBridge()
        self._publisher = self.create_publisher(MoveCommand, '/move/command', 1)
        self._subscriber = self.create_subscription(
            Image, '/camera', self._on_image_received, 1)
        self._debug_publisher = self.create_publisher(
            Image, '/camera/debug', 1)

    def _on_image_received(self, msg):
        image = self.cv_bridge.imgmsg_to_cv2(msg)

        # detect red blob in the image
        image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
        mask = cv2.inRange(image, (50, 150, 0), (200, 230, 255))
        contours, _ = cv2.findContours(
            mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if len(contours) > 0:
            contour = max(contours, key=cv2.contourArea)
            M = cv2.moments(contour)
            if cv2.contourArea(contour) > 50000:
                cx = int(M['m10'] / M['m00'])
                cy = int(M['m01'] / M['m00'])

                error_x = (cx - image.shape[1] / 2) / (image.shape[1] / 2)
                error_y = (cy - image.shape[0] / 2) / (image.shape[0] / 2)
                self.get_logger().info(f'error_x: {error_x}, error_y: {error_y}')

                # draw a circle at the center of the blob and publish the image
                cv2.circle(image, (cx, cy), 50, (0, 0, 255), -1)
                self._debug_publisher.publish(
                    self.cv_bridge.cv2_to_imgmsg(image, 'bgr8'))

                # emulate processing latency
                time.sleep(0.3)

                move_command = MoveCommand()
                move_command.target.theta = -error_x * 0.4
                move_command.rotate_towards_goal = False
                move_command.translate = False
                
                # The `Move` node uses the timestamp of the image message to compensate for the latency.
                move_command.header.stamp = msg.header.stamp
                
                move_command.header.frame_id = 'base_link'
                self._publisher.publish(move_command)


def main(args=None):
    rclpy.init(args=args)
    move = Move()
    rclpy.spin(move)
    move.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()